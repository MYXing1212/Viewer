/*
Title: Compute Shaders
File Name: compute.glsl
Copyright ?2016
Original authors: David Erbelding
Written under the supervision of David I. Schwartz, Ph.D., and
supported by a professional development seed grant from the B. Thomas
Golisano College of Computing & Information Sciences
(https://www.rit.edu/gccis) at the Rochester Institute of Technology.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// Compute shaders are part of openGL core since version 4.3
#version 430

layout(location = 0) uniform uint w;  

layout (rgba32f, binding = 0) uniform image2D input_image;
layout (rgba32f, binding = 1) uniform image2D output_image;


// This defines the dimensions of the compute shaders local group.
// This is the smallest group of times that this compute shader will be invoked on the data set.
// Multiplying all 3 values gives us the "volume" of one operation.
// When glDispatchCompute is called, it takes in 3 values that define how many local groups to run.
// In this case, we just want to operate on one thing at a time.
layout (local_size_x = 600, local_size_y = 1) in;

// Declare main program function which is executed when
// glDispatchCompute is called from the application.
void main()
{
	const int batchSize = 800;

	float data[batchSize];
	uint index = gl_GlobalInvocationID.x;

	//ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	for(int i = 0; i <batchSize;i++)
	{
		ivec2 imgPos = ivec2(i, index);
		data[i] = imageLoad(input_image, imgPos);
	}

	barrier();
	float scale = 2 * 3.1415926535f / 800.0f;
	
	for(int i = 0;i<batchSize;i++)
	{
		vec2 tmp = vec4(0, 0);
		ivec2 imgPos = ivec2(i, index);

		for(int j = 0;j<batchSize;j++)
		{
			tmp.x = tmp.x + data[j].x * cos(scale *i*j);
			tmp.y = tmp.y + data[j].x * sin(scale *i*j);
		}
		imageStore(output_image, imgPos, tmp);
	}



	//ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

	//vec4 data = imageLoad(input_image, pos);
	////vec4 data2 = imageLoad(output_image, pos);
	//barrier();

	////if(data.x < data2.x)
	////	data = vec4(in_dt);
	////data = vec4(5.0f);

	////data = data + 2.0;

	//for (int n = 0; n <= N - 1; n++)
	//{
	//	X.ptr<double>(k)[0] += data[n] * cos(scale *k*n);
	//	X.ptr<double>(k)[1] += data[n] * sin(scale *k*n);
	//}

	//imageStore(output_image, pos, data + in_dt);

	////if(data.x < data2.x)
	////	data = vec4(in_dt);
	////data = vec4(5.0f);

	////data = data + 2.0;

	//for (int n = 0; n <= N - 1; n++)
	//{
	//	X.ptr<double>(k)[0] += data[n] * cos(scale *k*n);
	//	X.ptr<double>(k)[1] += data[n] * sin(scale *k*n);
	//}

	//imageStore(output_image, pos, data + in_dt);

	//// Get the index of this object into the buffer
	//uint index = gl_GlobalInvocationID.x;

	//// Create a rotation matrix for angle based on delta time.
	//mat2 rotation = mat2(
	//	cos(in_dt), sin(in_dt),
	//	-sin(in_dt), cos(in_dt)
	//);

	//// Rotate the vertex positions.
	//outBuffer.data[index].position.xy = rotation * outBuffer.data[index].position.xy;
	//outBuffer.data[index].position.x += in_dt0 / 10.0f;
	//outBuffer.data[index].position.y += in_dt0 / 10.0f;

	//// Add the vertex position to it's color value.
	//// This is a completely arbitrary operation. It just looks cool.
	//outBuffer.data[index].color += vec4(outBuffer.data[index].position.xy, 0, 1) * in_dt;
}